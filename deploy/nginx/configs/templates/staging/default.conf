upstream app {
  server app:${APP_PORT};
}

# Force SSL
server {
  listen 8080;
  server_name ${SERVER_NAME} www.${SERVER_NAME};
  return 301 https://$server_name$request_uri;
}

server {
  # For SSL
  # listen 8443 ssl http2 default_server;
  # For non SSL
  listen 8080 default_server;

  server_name ${SERVER_NAME};

  root ${ROOT_PATH};
  index index.html;

  # For SSL only
  # ssl_certificate     ${SSL_CERTIFICATE_PATH};
  # ssl_certificate_key ${SSL_CERTIFICATE_KEY_PATH};
  # ssl_protocols TLSv1.2;
  # ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA;
  # ssl_prefer_server_ciphers on;
  # ssl_session_tickets off;
  # ssl_session_timeout 1d;
  # ssl_session_cache shared:SSL:1m;

  client_max_body_size 32M;
  keepalive_timeout 10;

  # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
  # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
  location ~ /\. {
    deny all;
  }

  location ^~ /assets/ {
    gzip_static on;
    expires max;
    add_header Cache-Control public;
  }

  location = /50x.html {
    root html;
  }

  location = /404.html {
    root html;
  }

  location @503 {
    error_page 405 = /system/maintenance.html;
    if (-f $document_root/system/maintenance.html) {
      rewrite ^(.*)$ /system/maintenance.html break;
    }
    rewrite ^(.*)$ /503.html break;
  }

  if ($request_method !~ ^(GET|HEAD|PUT|PATCH|POST|DELETE|OPTIONS)$ ){
    return 405;
  }

  if (-f $document_root/system/maintenance.html) {
    return 503;
  }

  location ~ \.(php|html)$ {
    return 405;
  }

  location / {
    try_files $uri @app_proxy;
  }

  location @app_proxy {
    proxy_redirect off;
    proxy_set_header Client-Ip $remote_addr;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    gzip_static on;
    proxy_pass http://app;
  }

  location /cable {
    # Enables WebSocket support
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";

    proxy_redirect off;
    proxy_set_header Client-Ip $remote_addr;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_pass http://app;
  }
}
